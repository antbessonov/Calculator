import org.junit.jupiter.params.provider.Arguments

object CalculatorTestData {

    const val EMPTY_STRING = ""

    @JvmStatic
    fun provideBasicSumTestCases() = listOf(
        Arguments.of("2", "3", "2,00 + 3,00 = 5,00"),
        Arguments.of("2", "4.78", "2,00 + 4,78 = 6,78"),
        Arguments.of("5.78", "3", "5,78 + 3,00 = 8,78"),
        Arguments.of("5.78", "4.78", "5,78 + 4,78 = 10,56"),
    )

    @JvmStatic
    fun testSumBoundaryCases() = listOf(
        Arguments.of("0", "0", "0,00 + 0,00 = 0,00"),
        Arguments.of("1", "0.0002", "1,00 + 0,0002 = 1,0002"),
        Arguments.of("0.0001", "1", "0,0001 + 1,00 = 1,0001"),
        Arguments.of("0.0001", "0.0002", "0,0001 + 0,0002 = 0,0003"),
        Arguments.of("2147483647", "1", "2147483647,00 + 1,00 = 2147483648,00"),
        Arguments.of("1", "2147483647", "1,00 + 2147483647,00 = 2147483648,00"),
        Arguments.of("2147483647", "2147483647", "2147483647,00 + 2147483647,00 = 4294967294,00"),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1",
            "1234567890123456789012345678901234567890,00 + 1,00 = 1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "1",
            "1234567890123456789012345678901234567890",
            "1,00 + 1234567890123456789012345678901234567890,00 = 1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 + 1234567890123456789012345678901234567890,00 = 2469135780246913578024691357802469135780,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "1",
            "-1234567890123456789012345678901234567890,00 + 1,00 = -1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1",
            "-1234567890123456789012345678901234567890",
            "1,00 + -1234567890123456789012345678901234567890,00 = -1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890,00 + -1234567890123456789012345678901234567890,00 = -2469135780246913578024691357802469135780,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 + -1234567890123456789012345678901234567890,00 = 00,00"
        ),
    )

    @JvmStatic
    fun provideSpecialSumTestCases() = listOf(
        Arguments.of("2", "-3", "2,00 + -3,00 = -1,00"),
        Arguments.of("-2", "3", "-2,00 + 3,00 = 1,00"),
        Arguments.of("-2", "-3", "-2,00 + -3,00 = -5,00"),
        Arguments.of("12 342", "3", "12342,00 + 3,00 = 12345,00"),
        Arguments.of("2", "12 342", "2,00 + 12342,00 = 12345,00"),
        Arguments.of("12 342", "12 342", "12342,00 + 12342,00 = 24684,00"),
        Arguments.of("1", "0,0002", "1,00 + 0,0002 = 1,0002"),
        Arguments.of("0,0001", "1", "0,0001 + 1,00 = 1,0001"),
        Arguments.of("0,0001", "0,0002", "0,0001 + 0,0002 = 0,0003"),
        Arguments.of("1/2", "3", "0,50 + 3,00 = 3,50"),
        Arguments.of("3", "1/2", "3,00 + 0,50 = 3,50"),
        Arguments.of("1/2", "1/2", "0,50 + 0,50 = 1,00"),
    )

    @JvmStatic
    fun provideBasicSubtractTestCases() = listOf(
        Arguments.of("5", "3", "5,00 - 3,00 = 2,00"),
        Arguments.of("3", "5", "3,00 - 5,00 = -2,00"),
        Arguments.of("2", "4.78", "2,00 - 4,78 = -2,78"),
        Arguments.of("5.78", "3", "5,78 - 3,00 = 2,78"),
        Arguments.of("5.78", "4.78", "5,78 - 4,78 = 1,00")
    )

    @JvmStatic
    fun provideSubtractBoundaryCases() = listOf(
        Arguments.of("0", "0", "0,00 - 0,00 = 0,00"),
        Arguments.of("1", "0.0002", "1,00 - 0,0002 = 0,9998"),
        Arguments.of("0.0001", "1", "0,0001 - 1,00 = -0,9999"),
        Arguments.of("0.0001", "0.0002", "0,0001 - 0,0002 = -0,0001"),
        Arguments.of("2147483647", "1", "2147483647,00 - 1,00 = 2147483646,00"),
        Arguments.of("1", "2147483647", "1,00 - 2147483647,00 = -2147483646,00"),
        Arguments.of("2147483647", "2147483647", "2147483647,00 - 2147483647,00 = 0,00"),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1",
            "1234567890123456789012345678901234567890,00 - 1,00 = 1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1",
            "1234567890123456789012345678901234567890",
            "1,00 - 1234567890123456789012345678901234567890,00 = -1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 - 1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "1",
            "-1234567890123456789012345678901234567890,00 - 1,00 = -1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "1",
            "-1234567890123456789012345678901234567890",
            "1,00 - -1234567890123456789012345678901234567890,00 = 1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890,00 - -1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 - -1234567890123456789012345678901234567890,00 = 2469135780246913578024691357802469135780,00"
        ),
    )

    @JvmStatic
    fun provideSpecialSubtractTestCases() = listOf(
        Arguments.of("2", "-3", "2,00 - -3,00 = 5,00"),
        Arguments.of("-2", "3", "-2,00 - 3,00 = -5,00"),
        Arguments.of("-2", "-3", "-2,00 - -3,00 = 1,00"),
        Arguments.of("12 342", "3", "12342,00 - 3,00 = 12339,00"),
        Arguments.of("2", "12 342", "2,00 - 12342,00 = -12340,00"),
        Arguments.of("12 342", "12 342", "12342,00 - 12342,00 = 0,00"),
        Arguments.of("1", "0,0002", "1,00 - 0,0002 = 0,9998"),
        Arguments.of("0,0001", "1", "0,0001 - 1,00 = -0,9999"),
        Arguments.of("0,0001", "0,0002", "0,0001 - 0,0002 = -0,0001"),
        Arguments.of("1/2", "3", "0,50 - 3,00 = -2,50"),
        Arguments.of("3", "1/2", "3,00 - 0,50 = 2,50"),
        Arguments.of("1/2", "1/2", "0,50 - 0,50 = 0,00"),
    )

    @JvmStatic
    fun provideBasicMultiplyTestCases() = listOf(
        Arguments.of("2", "3", "2,00 * 3,00 = 6,00"),
        Arguments.of("2", "2.04", "2,00 * 2,04 = 4,08"),
        Arguments.of("2.04", "2", "2,04 * 2,00 = 4,08"),
        Arguments.of("2.04", "2.04", "2,04 * 2,04 = 4,16"),
    )

    @JvmStatic
    fun provideMultiplyBoundaryCases() = listOf(
        Arguments.of("0", "0", "0,00 * 0,00 = 0,00"),
        Arguments.of("1", "0.0002", "1,00 * 0,0002 = 0,9998"),
        Arguments.of("0.0001", "1", "0,0001 * 1,00 = -0,9999"),
        Arguments.of("0.0001", "0.0002", "0,0001 * 0,0002 = -0,0001"),
        Arguments.of("2147483647", "1", "2147483647,00 * 1,00 = 2147483646,00"),
        Arguments.of("1", "2147483647", "1,00 * 2147483647,00 = -2147483646,00"),
        Arguments.of("2147483647", "2147483647", "2147483647,00 * 2147483647,00 = 0,00"),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1",
            "1234567890123456789012345678901234567890,00 * 1,00 = 1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1",
            "1234567890123456789012345678901234567890",
            "1,00 * 1234567890123456789012345678901234567890,00 = -1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 * 1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "1",
            "-1234567890123456789012345678901234567890,00 * 1,00 = -1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "1",
            "-1234567890123456789012345678901234567890",
            "1,00 * -1234567890123456789012345678901234567890,00 = 1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890,00 * -1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 * -1234567890123456789012345678901234567890,00 = 2469135780246913578024691357802469135780,00"
        ),
    )

    @JvmStatic
    fun provideSpecialMultiplyTestCases() = listOf(
        Arguments.of("2", "-3", "2,00 * -3,00 = -6,00"),
        Arguments.of("-2", "3", "-2,00 * 3,00 = -6,00"),
        Arguments.of("-2", "-3", "-2,00 * -3,00 = 6,00"),
        Arguments.of("12 342", "3", "12342,00 * 3,00 = 37026,00"),
        Arguments.of("2", "12 342", "2,00 * 12342,00 = -37026,00"),
        Arguments.of("12 342", "12 342", "12342,00 * 12342,00 = 152324964,00"),
        Arguments.of("1", "0,0002", "1,00 * 0,0002 = 0,0002"),
        Arguments.of("0,0001", "1", "0,0001 * 1,00 = 0,0001"),
        Arguments.of("0,0001", "0,0002", "0,0001 * 0,0002 = 0.00000002"),
        Arguments.of("1/2", "3", "0,50 * 3,00 = 1,50"),
        Arguments.of("3", "1/2", "3,00 * 0,50 = 1,50"),
        Arguments.of("1/2", "1/2", "0,50 * 0,50 = 0,25"),
    )

    @JvmStatic
    fun provideBasicDivideTestCases() = listOf(
        Arguments.of("6", "3", "6,00 / 3,00 = 2,00"),
        Arguments.of("3.9", "3", "3,90 / 3,00 = 1,30"),
        Arguments.of("6", "2.5", "6,00 / 2,50 = 2,40"),
        Arguments.of("19.84", "3.2", "19,84 / 3,20 = 6,20"),
    )

    @JvmStatic
    fun provideDivideBoundaryCases() = listOf(
        Arguments.of("8", "0", "8,00 / 0,00 = 0,00"),
        Arguments.of("4.67", "0", "4.67 / 0,00 = 0,00"),
        Arguments.of("0", "0", "0,00 / 0,00 = 0,00"),
        Arguments.of("1", "0.0002", "1,00 / 0,0002 = 0,9998"),
        Arguments.of("0.0001", "1", "0,0001 / 1,00 = -0,9999"),
        Arguments.of("0.0001", "0.0002", "0,0001 / 0,0002 = -0,0001"),
        Arguments.of("2147483647", "1", "2147483647,00 / 1,00 = 2147483646,00"),
        Arguments.of("1", "2147483647", "1,00 / 2147483647,00 = -2147483646,00"),
        Arguments.of("2147483647", "2147483647", "2147483647,00 / 2147483647,00 = 0,00"),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1",
            "1234567890123456789012345678901234567890,00 / 1,00 = 1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1",
            "1234567890123456789012345678901234567890",
            "1,00 / 1234567890123456789012345678901234567890,00 = -1234567890123456789012345678901234567889,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 / 1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "1",
            "-1234567890123456789012345678901234567890,00 / 1,00 = -1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "1",
            "-1234567890123456789012345678901234567890",
            "1,00 / -1234567890123456789012345678901234567890,00 = 1234567890123456789012345678901234567891,00"
        ),
        Arguments.of(
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890,00 / -1234567890123456789012345678901234567890,00 = 0,00"
        ),
        Arguments.of(
            "1234567890123456789012345678901234567890",
            "-1234567890123456789012345678901234567890",
            "1234567890123456789012345678901234567890,00 / -1234567890123456789012345678901234567890,00 = 2469135780246913578024691357802469135780,00"
        ),
    )

    @JvmStatic
    fun provideSpecialDivideTestCases() = listOf(
        Arguments.of("6", "-3", "6,00 / -3,00 = -2,00"),
        Arguments.of("-6", "3", "-6,00 / 3,00 = -2,00"),
        Arguments.of("-6", "-3", "-6,00 / -3,00 = 2,00"),
        Arguments.of("12 342", "3", "12342,00 / 3,00 = 4114,00"),
        Arguments.of("24684", "12 342", "24684,00 / 12342,00 = 2,00"),
        Arguments.of("12 342", "12 342", "12342,00 / 12342,00 = 1,00"),
        Arguments.of("1", "0,0002", "1,00 / 0,0002 = 5000,00"),
        Arguments.of("0,0001", "1", "0,0001 / 1,00 = 0,0001"),
        Arguments.of("0,0001", "0,0002", "0,0001 / 0,0002 = 0,50"),
        Arguments.of("1/2", "2", "0,50 / 2,00 = 0,25"),
        Arguments.of("3", "1/2", "3,00 / 0,50 = 6,00"),
        Arguments.of("1/2", "1/2", "0,50 / 0,50 = 1,00"),
    )

    @JvmStatic
    fun provideNegativeTestCases() = listOf(
        Arguments.of("", "", "Please, fill the input fields correctly"),
        Arguments.of("", "0", "Please, fill the input fields correctly"),
        Arguments.of("0", "", "Please, fill the input fields correctly"),
        Arguments.of("hello", "3", "Please, fill the input fields correctly"),
        Arguments.of("3", "hello", "Please, fill the input fields correctly"),
        Arguments.of("hello", "hello", "Please, fill the input fields correctly"),
        Arguments.of("$%$", "3", "Please, fill the input fields correctly"),
        Arguments.of("3", "$%$", "Please, fill the input fields correctly"),
        Arguments.of("$%$", "$%$", "Please, fill the input fields correctly")
    )

    @JvmStatic
    fun provideInputForResetFunctionalityTest() = listOf(
        Arguments.of("5.67", "2.04", EMPTY_STRING)
    )

    @JvmStatic
    fun provideTestDataForMinimizeAndRestoreTest() = listOf(
        Arguments.of("8.38", "5.47")
    )
}